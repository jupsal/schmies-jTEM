/**
This file is part of a jTEM project.
All jTEM projects are licensed under the FreeBSD license 
or 2-clause BSD license (see http://www.opensource.org/licenses/bsd-license.php). 

Copyright (c) 2002-2009, Technische Universit√§t Berlin, jTEM
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, 
are permitted provided that the following conditions are met:

-	Redistributions of source code must retain the above copyright notice, 
	this list of conditions and the following disclaimer.

-	Redistributions in binary form must reproduce the above copyright notice, 
	this list of conditions and the following disclaimer in the documentation 
	and/or other materials provided with the distribution.
 
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS 
BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, 
OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT 
OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
OF SUCH DAMAGE.
**/

package de.jtem.riemann.schottky;

import de.jtem.blas.ComplexVector;
import de.jtem.mfc.field.Complex;
import de.jtem.numericalMethods.calculus.function.RealVectorValuedFunctionOfOneVariable;
import de.jtem.numericalMethods.calculus.integration.ExtrapIntegrator;

/**
 * This support class performs the numerical integration of the
 * normalized differentials which is needed for abel's map.
 * Analytic integration of the poincaree theta series can not
 * avoid periods generated by the logarithm.
 * To determine these periods we have to integrate the
 * differentials numericly. But this can be done with a low
 * precession (0.01), because one only wants to compare
 * the result with the analytic integral.
 *
 * @author Markus Schmies
 * */
public class AbelMap {

	Schottky schottky;

	public AbelMap(Schottky schottky) {

		if (schottky == null)
			throw new NullPointerException("must precribe schottky group");

		this.schottky = schottky;
	}

	DifferentialOf1stKindPathIntegrator d1stpi =
		new DifferentialOf1stKindPathIntegrator();
	DifferentialOf3rdKindPathIntegrator d3rdpi =
		new DifferentialOf3rdKindPathIntegrator();

	/** usual set up for path integration */
	abstract class DifferentialPathIntegrator
		implements RealVectorValuedFunctionOfOneVariable {

		/** real integrator */
		ExtrapIntegrator extrap = new ExtrapIntegrator(this);

		int numberOfEvaluations;

		double t, tOfQ, tOfP, diffTol;

		final double[] I = new double[2];

		final Complex integral = new Complex();
		final Complex differentialAtZ = new Complex();

		final Complex Z = new Complex();
		final Complex P = new Complex();
		final Complex Q = new Complex();
		final Complex v = new Complex();

		void startAt(Complex a) {
			numberOfEvaluations = 0;

			t = tOfQ = 0;
			Z.assign(a);
			Q.assign(a);

			I[0] = I[1] = 0;

			extrap.startAt(tOfQ);
		}

		void integrateTo(Complex b) {
			P.assign(Q);
			Q.assign(b);

			v.assignMinus(Q, P);

			final double sizeOfSegment = v.abs();

			tOfP = tOfQ;
			tOfQ = tOfP + sizeOfSegment;

			if (sizeOfSegment * sizeOfSegment
				< 1e-30 * Math.max(P.absSqr(), Q.absSqr()))
				return;

			v.assignDivide(sizeOfSegment);

			extrap.integrateTo(tOfQ);
		}

		void getIntegral(Complex integral) {
			extrap.getIntegral(I, 0);

			integral.assign(I[0], I[1]);
		}

		Complex getIntegral() {
			extrap.getIntegral(I, 0);

			return new Complex(I[0], I[1]);
		}

		void setIntegrationTol(double tol) {
			extrap.setAbsTol(tol);
			extrap.setRelTol(tol);
		}

		void setDifferentialTol(double tol) {
			diffTol = tol;
		}

		void setDoubleParameter(double t) {
			this.t = t;

			if (t == tOfP) {
				Z.assign(P);
			} else if (t == tOfQ) {
				Z.assign(Q);
			} else {
				Z.assignTimes(v, t - tOfP);
				Z.assignPlus(P);
			}
		}

		public int getDimensionOfTargetSpace() {
			return 2;
		}
	}

	/** usual set up for path integration */
	final class DifferentialOf1stKindPathIntegrator
		extends DifferentialPathIntegrator {

		/** index of differential */
		int n = 0;

		void startAt(Complex a, int differential) {
			n = differential;

			super.startAt(a);
		}

		public void eval(double t, double[] value) {
			setDoubleParameter(t);

			numberOfEvaluations++;

			schottky.abelianDifferentialOf1stKind(
				differentialAtZ,
				Z,
				n,
				diffTol);

			differentialAtZ.assignTimes(v);

			value[0] = differentialAtZ.re;
			value[1] = differentialAtZ.im;
		}
	}
	/** usual set up for path integration */
	final class DifferentialOf3rdKindPathIntegrator
		extends DifferentialPathIntegrator {

		final Complex A = new Complex();
		final Complex B = new Complex();

		void startAt(Complex a, Complex A, Complex B) {
			this.A.assign(A);
			this.B.assign(B);

			super.startAt(a);
		}

		public void eval(double t, double[] value) {
			setDoubleParameter(t);
			numberOfEvaluations++;

			schottky.abelianDifferentialOf3rdKind(
				differentialAtZ,
				Z,
				A,
				B,
				diffTol);

			differentialAtZ.assignTimes(v);

			value[0] = differentialAtZ.re;
			value[1] = differentialAtZ.im;
		}
	}

	/**
	 * integrates normalized differential of first kind with prescribed
	 * index numerically along given path with prescribed tol.
	 * @param index of normalized differentil of first kind
	 * @param path of integration
	 * @param tol absolute and relative tolerance of numerical integration,
	 * the differential is evaluated with an accuracy of one tenth of tol.
	 * @returns integral */
	public Complex numEval(int index, ComplexVector path, double tol) {
		final int n = path.size();

		if (n < 2)
			return new Complex();

		d1stpi.setIntegrationTol(tol);
		d1stpi.setDifferentialTol(tol / 10);

		d1stpi.startAt(path.get(0), index);

		for (int i = 1; i < n; i++) {
			d1stpi.integrateTo(path.get(i));
		}

		return d1stpi.getIntegral();
	}

	/**
	 * Computes normalized integral of first kind with prescribed
	 * index along given path.
	 * @param index of normalized differential of first kind
	 * @param path of integration
	 * @param acc accuracy of integral
	 * @returns normalized integral of first kind */
	public Complex eval(int index, ComplexVector path, double acc) {
		final int n = path.size();

		if (n < 2)
			return new Complex();

		Complex numericalIntegral = numEval(index, path, 0.1);

		Complex analyticIntegral =
			schottky.abelianIntegralOf1stKind(
				path.get(n - 1),
				index,
				acc).minus(
				schottky.abelianIntegralOf1stKind(path.get(0), index, acc));

		final int N =
			(int) Math.floor(
				(analyticIntegral.im - numericalIntegral.im) / 2 / Math.PI
					+ 0.5);

		analyticIntegral.im -= N * 2 * Math.PI;

		return analyticIntegral;
	}

	/**
	 * integrates normalized differential of thrid kind with prescribes poles A
	 * and B numerically along given path.
	 * @param A singularity with residue -1
	 * @param B singularity with residue +1
	 * @param path of integration
	 * @param tol absolute and relative tolerance of numerical integration,
	 * the differential is evaluated with an accuracy of one tenth of tol.
	 * @returns normalized integral of third kind */
	public Complex numEval(
		Complex A,
		Complex B,
		ComplexVector path,
		double tol) {
		final int n = path.size();

		if (n < 2)
			return new Complex();

		d3rdpi.setIntegrationTol(tol);
		d3rdpi.setDifferentialTol(tol / 10);

		d3rdpi.startAt(path.get(0), A, B);

		for (int i = 1; i < n; i++) {
			d3rdpi.integrateTo(path.get(i));
		}

		return d3rdpi.getIntegral();
	}

	/**
	 * Computes normalized integral of thrid kind along prescribed path.
	 * @param A singularity with residue -1
	 * @param B singularity with residue +1
	 * @param path of integration
	 * @param acc accurac of integral
	 * @returns normalized integral of third kind*/
	public Complex eval(
		final Complex A,
		final Complex B,
		ComplexVector path,
		double acc) {
		final int n = path.size();

		if (n < 2)
			return new Complex();

		Complex numericalIntegral = eval(A, B, path, 0.1);

		Complex analyticIntegral =
			schottky.abelianIntegralOf3rdKind(
				path.get(n - 1),
				A,
				B,
				acc).minus(
				schottky.abelianIntegralOf3rdKind(path.get(0), A, B, acc));

		final int N =
			(int) Math.floor(
				(analyticIntegral.im - numericalIntegral.im) / 2 / Math.PI
					+ 0.5);

		analyticIntegral.im -= N * 2 * Math.PI;

		return analyticIntegral;
	}

}
